{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../service/games.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../layout/menu/menu.component\";\nimport * as i5 from \"../../../layout/header/header.component\";\nimport * as i6 from \"../../../layout/slide/slide.component\";\n\nconst _c0 = function (a0) {\n  return {\n    color: a0\n  };\n};\n\nfunction GamesComponent_li_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵelement(1, \"img\", 8);\n    i0.ɵɵelementStart(2, \"h3\", 9)(3, \"a\", 10);\n    i0.ɵɵlistener(\"click\", function GamesComponent_li_11_Template_a_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const game_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.openTeam(game_r1.AwayTeam.GlobalTeamID));\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"h3\", 9)(7, \"a\", 10);\n    i0.ɵɵlistener(\"click\", function GamesComponent_li_11_Template_a_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const game_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.openTeam(game_r1.HomeTeam.GlobalTeamID));\n    });\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"h3\", 11);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const game_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", game_r1.TeamWin.ImgWin, i0.ɵɵsanitizeUrl);\n    i0.ɵɵpropertyInterpolate(\"alt\", game_r1.TeamWin.TeamWin);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(9, _c0, game_r1.AwayTeam.Color));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", game_r1.AwayTeam.Name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" : \", game_r1.AwayTeam.Percentage, \"% \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(11, _c0, game_r1.HomeTeam.Color));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", game_r1.HomeTeam.Name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" : \", game_r1.HomeTeam.Percentage, \"% \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Empate : \", game_r1.tie, \"% \");\n  }\n}\n\nexport let GamesComponent = /*#__PURE__*/(() => {\n  class GamesComponent {\n    constructor(gamesService, router) {\n      this.gamesService = gamesService;\n      this.router = router;\n      this.teamsStats = [];\n      this.gamesSchedule = [];\n      this.teamArray = [];\n      this.teams = [];\n      this.teamsLogo = [];\n      this.count = 0;\n      this.counter = 0;\n      this.img = '../../assets/image/teams/NFL.jpg';\n      this.arrayCompleteTeam = [];\n      this.arrayCompleteTeamMDB = [];\n    }\n\n    ngOnInit() {\n      // this._requestGetForecastData();\n      this._requestGetCurrentWeek();\n    }\n\n    _requestGetForecastData() {\n      // ForecastData\n      console.log('ForecastData ====> ');\n      this.gamesService.getForecastData().subscribe(data => {// this.week = data\n        // this._requestGetSchedules();\n      }, e => {\n        console.log(e);\n      });\n    }\n\n    _requestGetCurrentWeek() {\n      // CurrentWeek\n      console.log('CurrentWeek ====> ');\n      this.gamesService.getCurrentWeek().subscribe(data => {\n        this.week = parseFloat(data.body);\n\n        this._requestGetSchedules();\n      }, e => {\n        console.log(e);\n      });\n    }\n\n    _requestGetSchedules() {\n      // Schedule\n      console.log('Schedule ====> ');\n      this.gamesService.getGames().subscribe(data => {\n        const dat = JSON.parse(data.body);\n        dat.forEach(element => {\n          if (element.Week === this.week) {\n            this.gamesSchedule.push(element);\n          }\n        });\n\n        this._requestGetDataEquipment();\n      }, e => {});\n    }\n\n    _requestGetDataEquipment() {\n      // Data Equipment\n      console.log('DataEquipment ====> ');\n      this.gamesService.getTeamsStanding().subscribe(data => {\n        data.forEach(element => {\n          const kv1 = {\n            Name: element.Name,\n            GlobalTeamID: element.GlobalTeamID,\n            MaddenOvr: element.MaddenOvr,\n            MaddenOvrOff: element.MaddenOvrOff,\n            MaddenOvrDff: element.MaddenOvrDff,\n            Color: element.SecondaryColor,\n            Pick: element.Pick\n          };\n          this.arrayCompleteTeam[element.GlobalTeamID] = kv1;\n        });\n\n        this._requestGetStandings();\n      }, e => {\n        console.log(e);\n      });\n    }\n\n    _requestGetStandings() {\n      // Standings\n      console.log('Standings ====> ');\n      this.gamesService.getStandings().subscribe(data => {\n        const dat = JSON.parse(data.body);\n        dat.forEach(element => {\n          const target = {\n            Conference: element.Conference,\n            Division: element.Division,\n            Wins: element.Wins,\n            Losses: element.Losses,\n            NetPoints: element.NetPoints,\n            Touchdowns: element.Touchdowns,\n            DivisionWins: element.DivisionWins,\n            DivisionLosses: element.DivisionLosses,\n            ConferenceWins: element.ConferenceWins,\n            ConferenceLosses: element.ConferenceLosses,\n            GlobalTeamID: element.GlobalTeamID,\n            DivisionRank: element.DivisionRank,\n            ConferenceRank: element.ConferenceRank\n          };\n          this.arrayCompleteTeam[element.GlobalTeamID] = Object.assign(this.arrayCompleteTeam[element.GlobalTeamID], target);\n        });\n        console.log(this.arrayCompleteTeam);\n\n        this._requestGetTeamSeasonStats();\n      }, e => {\n        console.log(e);\n      });\n    }\n\n    _requestGetTeamSeasonStats() {\n      // TeamSeasonStats\n      console.log('TeamSeasonStats ====> ');\n      this.gamesService.getTeamSeasonStats().subscribe(data => {\n        const dat = JSON.parse(data.body);\n        dat.forEach(element => {\n          const target = {\n            OffensivePassRank: element.PassingYards,\n            OffensiveRunRank: element.RushingYards,\n            DefensivePassRank: element.OpponentPassingYards,\n            DefensiveRunRank: element.OpponentRushingYards,\n            OffensiveScore: element.Score,\n            DefensiveScore: element.OpponentScore,\n            ShortName: element.Team\n          };\n          this.arrayCompleteTeam[element.GlobalTeamID] = Object.assign(this.arrayCompleteTeam[element.GlobalTeamID], target);\n        });\n\n        this._requestGetTeamsSeason();\n      }, e => {});\n    }\n\n    _requestGetTeamsSeason() {\n      // TeamsSeasons\n      console.log('TeamsSeasons ====> ');\n      this.gamesService.getTeamsSeason().subscribe(data => {\n        const dat = JSON.parse(data.body);\n        dat.forEach(element => {\n          const target = {\n            Logo: element.WikipediaLogoUrl\n          };\n          this.arrayCompleteTeam[element.GlobalTeamID] = Object.assign(this.arrayCompleteTeam[element.GlobalTeamID], target);\n        });\n\n        this._requestGetTeamGameStats();\n      }, e => {\n        console.log(e);\n      });\n    }\n\n    _requestGetTeamGameStats() {\n      const week = this.week - 1; // TeamGameStats\n\n      console.log('TeamGameStats ====> ');\n\n      if (week > 0) {\n        this.gamesService.getScores(week).subscribe(data => {\n          const dat = JSON.parse(data.body);\n          dat.forEach(element => {\n            let lastgame = 0;\n            const team = element.ScoreQuarter1 + element.ScoreQuarter2 + element.ScoreQuarter3 + element.ScoreQuarter4 + element.ScoreOvertime;\n            const opponent = element.OpponentScoreQuarter1 + element.OpponentScoreQuarter2 + element.OpponentScoreQuarter3 + element.OpponentScoreQuarter4 + element.OpponentScoreOvertime;\n\n            if (team > opponent) {\n              lastgame = 1;\n            } else {\n              lastgame = 0;\n            }\n\n            const target = {\n              LastGame: lastgame\n            };\n            this.arrayCompleteTeam[element.GlobalTeamID] = Object.assign(this.arrayCompleteTeam[element.GlobalTeamID], target);\n          });\n          this.teamsArrayValidate();\n        }, e => {});\n      } else {\n        const target = {\n          LastGame: 0\n        };\n        this.arrayCompleteTeam.forEach(element => {\n          this.arrayCompleteTeam[element.GlobalTeamID] = Object.assign(this.arrayCompleteTeam[element.GlobalTeamID], target);\n        });\n        this.teamsArrayValidate();\n      }\n    }\n\n    teamsArrayValidate() {\n      let key = 0;\n      this.gamesSchedule.forEach(elementSchedule => {\n        if (elementSchedule.AwayTeam !== 'BYE' && elementSchedule.Status !== 'Postponed' && this.arrayCompleteTeam[elementSchedule.GlobalHomeTeamID] !== null) {\n          this.teamArray[key] = {\n            HomeTeam: this.arrayCompleteTeam[elementSchedule.GlobalHomeTeamID],\n            AwayTeam: this.arrayCompleteTeam[elementSchedule.GlobalAwayTeamID],\n            Key: key\n          };\n          const targetHome = {\n            MoneyLine: elementSchedule.HomeTeamMoneyLine,\n            HomeOrAway: true\n          };\n          const targetAway = {\n            MoneyLine: elementSchedule.AwayTeamMoneyLine,\n            HomeOrAway: false\n          };\n          this.teamArray[key].HomeTeam = Object.assign(this.teamArray[key].HomeTeam, targetHome);\n          this.teamArray[key].AwayTeam = Object.assign(this.teamArray[key].AwayTeam, targetAway);\n          key++;\n        }\n      });\n      this.validateHomeOrAway();\n    }\n\n    validateHomeOrAway() {\n      this.teamArray.forEach(elementTeamArray => {\n        const PointsHome = 3;\n        const PointsAway = 0;\n        const targetHome = {\n          Points: PointsHome\n        };\n        const targetAway = {\n          Points: PointsAway\n        };\n        this.teamArray[elementTeamArray.Key].HomeTeam = Object.assign(this.teamArray[elementTeamArray.Key].HomeTeam, targetHome);\n        this.teamArray[elementTeamArray.Key].AwayTeam = Object.assign(this.teamArray[elementTeamArray.Key].AwayTeam, targetAway);\n      });\n      this.validateDivision();\n    }\n\n    validateDivision() {\n      this.teamArray.forEach(elementTeamArray => {\n        if (elementTeamArray.HomeTeam.Conference === elementTeamArray.AwayTeam.Conference && elementTeamArray.HomeTeam.Division === elementTeamArray.AwayTeam.Division) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 2;\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 5;\n        }\n      });\n      this.validateMaddenOvr();\n    }\n\n    validateMaddenOvr() {\n      this.teamArray.forEach(elementTeamArray => {\n        if (elementTeamArray.HomeTeam.MaddenOvr > elementTeamArray.AwayTeam.MaddenOvr) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 1;\n        } else if (elementTeamArray.HomeTeam.MaddenOvr < elementTeamArray.AwayTeam.MaddenOvr) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 1;\n        }\n\n        if (elementTeamArray.HomeTeam.MaddenOvrOff > elementTeamArray.AwayTeam.MaddenOvrDff) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 1;\n        } else if (elementTeamArray.HomeTeam.MaddenOvrOff < elementTeamArray.AwayTeam.MaddenOvrDff) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 1;\n        }\n\n        if (elementTeamArray.HomeTeam.MaddenOvrDff > elementTeamArray.AwayTeam.MaddenOvrOff) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 1;\n        } else if (elementTeamArray.HomeTeam.MaddenOvrDff < elementTeamArray.AwayTeam.MaddenOvrOff) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 1;\n        }\n      });\n      this.validateRank();\n    }\n\n    validateRank() {\n      this.teamArray.forEach(elementTeamArray => {\n        if (elementTeamArray.HomeTeam.OffensivePassRank > elementTeamArray.AwayTeam.DefensivePassRank) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 4;\n        } else if (elementTeamArray.HomeTeam.OffensivePassRank < elementTeamArray.AwayTeam.DefensivePassRank) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 4;\n        }\n\n        if (elementTeamArray.HomeTeam.OffensiveRunRank > elementTeamArray.AwayTeam.DefensiveRunRank) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 4;\n        } else if (elementTeamArray.HomeTeam.OffensiveRunRank < elementTeamArray.AwayTeam.DefensiveRunRank) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 4;\n        }\n      });\n      this.validateBets();\n    }\n\n    validateBets() {\n      this.teamArray.forEach(elementTeamArray => {\n        if (elementTeamArray.HomeTeam.Pick > elementTeamArray.AwayTeam.Pick) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 5;\n        } else if (elementTeamArray.HomeTeam.Pick < elementTeamArray.AwayTeam.Pick) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 5;\n        }\n\n        if (elementTeamArray.HomeTeam.MoneyLine < elementTeamArray.AwayTeam.MoneyLine) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 8;\n        } else if (elementTeamArray.HomeTeam.MoneyLine > elementTeamArray.AwayTeam.MoneyLine) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 8;\n        }\n      });\n      this.validateHistoricalTeam();\n    }\n\n    validateHistoricalTeam() {\n      let count = 0;\n      this.teamArray.forEach(elementTeamArray => {\n        if (elementTeamArray.HomeTeam.Losses < elementTeamArray.AwayTeam.Losses) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 4;\n        } else if (elementTeamArray.HomeTeam.Losses > elementTeamArray.AwayTeam.Losses) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 4;\n        }\n\n        if (elementTeamArray.HomeTeam.LastGame > elementTeamArray.AwayTeam.LastGame) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 4;\n        } else if (elementTeamArray.HomeTeam.LastGame < elementTeamArray.AwayTeam.LastGame) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 4;\n        }\n\n        if (elementTeamArray.HomeTeam.NetPoints > elementTeamArray.AwayTeam.NetPoints) {\n          this.teamArray[elementTeamArray.Key].HomeTeam.Points = this.teamArray[elementTeamArray.Key].HomeTeam.Points + 6;\n        } else if (elementTeamArray.HomeTeam.NetPoints < elementTeamArray.AwayTeam.NetPoints) {\n          this.teamArray[elementTeamArray.Key].AwayTeam.Points = this.teamArray[elementTeamArray.Key].AwayTeam.Points + 6;\n        }\n\n        count++;\n      });\n\n      if (this.teamArray.length === count) {\n        this.percentageWin();\n        this.validatePoints();\n      }\n    }\n\n    percentageWin() {\n      this.teamArray.forEach(elementTeamArray => {\n        this.teamArray[elementTeamArray.Key].HomeTeam.Percentage = (this.teamArray[elementTeamArray.Key].HomeTeam.Points / 48 * 100).toFixed(2);\n        this.teamArray[elementTeamArray.Key].AwayTeam.Percentage = (this.teamArray[elementTeamArray.Key].AwayTeam.Points / 48 * 100).toFixed(2);\n        const tieHome = parseInt(this.teamArray[elementTeamArray.Key].HomeTeam.Percentage);\n        const tieAway = parseInt(this.teamArray[elementTeamArray.Key].AwayTeam.Percentage);\n        const tieValue = tieHome + tieAway;\n        this.teamArray[elementTeamArray.Key].tie = 100 - tieValue;\n      });\n    }\n\n    validatePoints() {\n      this.teamArray.forEach(elementTeamArray => {\n        if (elementTeamArray.HomeTeam.Points > elementTeamArray.AwayTeam.Points) {\n          const targetH = {\n            TeamWin: {\n              ImgWin: elementTeamArray.HomeTeam.Logo,\n              TeamWinName: elementTeamArray.HomeTeam.Name\n            }\n          };\n          this.teamArray[elementTeamArray.Key] = Object.assign(this.teamArray[elementTeamArray.Key], targetH);\n        } else if (elementTeamArray.HomeTeam.Points < elementTeamArray.AwayTeam.Points) {\n          const targetA = {\n            TeamWin: {\n              ImgWin: elementTeamArray.AwayTeam.Logo,\n              TeamWinName: elementTeamArray.AwayTeam.Name\n            }\n          };\n          this.teamArray[elementTeamArray.Key] = Object.assign(this.teamArray[elementTeamArray.Key], targetA);\n        } else {\n          const targetE = {\n            TeamWin: {\n              ImgWin: '../assets/image/teams/NFL.png',\n              TeamWinName: 'Empate........'\n            }\n          };\n          this.teamArray[elementTeamArray.Key] = Object.assign(this.teamArray[elementTeamArray.Key], targetE);\n        }\n      });\n      console.log(this.teamArray);\n    }\n\n    openTeam(team) {\n      console.log(this.arrayCompleteTeam[team]);\n      localStorage.setItem('team', JSON.stringify(this.arrayCompleteTeam[team]));\n      this.router.navigate(['/team']);\n    }\n\n  }\n\n  GamesComponent.ɵfac = function GamesComponent_Factory(t) {\n    return new (t || GamesComponent)(i0.ɵɵdirectiveInject(i1.GamesService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  GamesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GamesComponent,\n    selectors: [[\"app-games\"]],\n    decls: 12,\n    vars: 2,\n    consts: [[1, \"kep-content\"], [1, \"kep-menu\"], [1, \"kep-section\"], [\"title\", \"NFL\"], [1, \"kep-subsection\"], [3, \"img\"], [1, \"kep-list-games\"], [4, \"ngFor\", \"ngForOf\"], [3, \"src\", \"alt\"], [3, \"ngStyle\"], [3, \"click\"], [2, \"color\", \"#B1FCFF\"]],\n    template: function GamesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"app-menu\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelement(4, \"app-header\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelement(6, \"app-slide\", 5);\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"h2\");\n        i0.ɵɵtext(9, \"Juegos\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"ul\");\n        i0.ɵɵtemplate(11, GamesComponent_li_11_Template, 12, 13, \"li\", 7);\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵpropertyInterpolate(\"img\", ctx.img);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.teamArray);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgStyle, i4.MenuComponent, i5.HeaderComponent, i6.SlideComponent]\n  });\n  return GamesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}